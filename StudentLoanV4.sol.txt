pragma solidity ^0.4.0;

contract StudentLoan {
    
    // Variables
    mapping (address => uint) balances; // Either investor or student => balance
    mapping (address => Investor) public investors; // Investor public key => Investor
    mapping (address => Student) public students; // Student public key => Student

    mapping(address => bool) hasOngoingInvestment;  //Does this address have an investment
    mapping(address => bool) hasOngoingLoan;        //Does this address have an outstanding loan
    mapping(address => bool) hasOngoingApplication; //Does this address have an ongoing application process

    mapping (uint => LoanApplication) public applications;
    mapping (uint => Loan) public loans;

    //Counters, always increment with creation of each new application and loan
    uint numApplications;
    uint numLoans;

    // Structs
    struct Investor{
        address investor_public_key;
        string name;
        bool EXISTS;
    }

    struct Student{
        address student_public_key;
        string name;
        uint income;
        bool EXISTS;
        uint[] active_loans;
        
    }
    
    struct LoanApplication{
        bool openApp;
        uint applicationId;
        address student;
        uint duration; // In months
        uint credit_amount; // Loan amount
        uint interest_rate; //From form
        uint sharePercent;
        uint income;
        string RiskRating; // Encoded string with delimiters (~)

    }
    
    struct Loan{
        bool openLoan;
        uint loanId;
        address student;
        address investor;
        uint interest_rate;
        uint duration;
        uint principal_amount;
        uint original_amount;
        uint amount_paid;
        uint startTime;
        uint monthlyCheckpoint;
        uint sharePercent;
        uint income;
        uint appId;
    }

    //Function is always called by investor token
    function createInvestor(string name) public {
        Investor memory investor;
        investor.name = name;
        investor.investor_public_key = msg.sender;
        investor.EXISTS = true;
        require (students[msg.sender].EXISTS != true); //Student cannot be investor
        investors[msg.sender] = investor;
        hasOngoingInvestment[msg.sender] = false;
        balances[msg.sender] = 0; // Initial balance
    }
    
    function createStudent (string name) public {
        Student memory student;
        require(student.EXISTS == false); //While investors can be many in a particular contract, student can be only one
        student.name = name;
        student.student_public_key = msg.sender;
        student.income = 0;
        student.EXISTS = true; //change student.EXISTS flag to true
        require (investors[msg.sender].EXISTS != true); //Investor cannot be student
        students[msg.sender] = student;
        hasOngoingLoan[msg.sender] = false;
        hasOngoingApplication[msg.sender] = false;
        balances[msg.sender] = 0; // Initial balance
    }
    

    //First step is to apply for a student loan. Refer to the LoanApplication struct
    //This function is  called by the student
    function createApplication(uint duration, uint interest_rate, uint credit_amount, uint sharePercent, uint income, string RiskRating) public {
        require(hasOngoingLoan[msg.sender] == false);
        require(hasOngoingApplication[msg.sender] == false);
        require(isStudent(msg.sender));
        //application indexed by numApplication (a global counter which increases with every new application) is the new application
        applications[numApplications] = LoanApplication(true, numApplications, msg.sender, duration, credit_amount, interest_rate, sharePercent, income, RiskRating);
        //increase the counter 
        numApplications += 1;
        //set bool flag of applicat address to signal he has an ongoing application
        hasOngoingApplication[msg.sender] = true;
    }
    
    
    //next, if requirements are met we need to turn the application into an ongoing loan. Refer to the loan struct.
    //This function is called by the investor
    function grantLoan(uint appId) public {
        
        require(balances[msg.sender] >= applications[appId].credit_amount); //Check sufficient balance
        require(hasOngoingInvestment[msg.sender] == false);  //Per contract we allow one investment per investor 

        // Take from sender and give to reciever
        balances[msg.sender] -= applications[appId].credit_amount;
        balances[applications[appId].student] += applications[appId].credit_amount;

        // Populate loan object
        loans[numLoans] = Loan(true, numLoans, applications[appId].student, msg.sender, applications[appId].interest_rate, applications[appId].duration,
        applications[appId].credit_amount, applications[appId].credit_amount, 0, now, 0, applications[appId].sharePercent, applications[appId].income, appId);
        numLoans += 1;

        applications[appId].openApp = false;
        hasOngoingLoan[applications[appId].student] = true;
        hasOngoingInvestment[msg.sender] = true;
    }    
    
    
    //find relevant id_s
    function findLoans() public returns (uint[])  {
  
        for(uint i=1; i<=numLoans; i++)
        {
                if(loans[i].student == msg.sender)
                {
                    students[msg.sender].active_loans.push(i);
        
                }
        }
        return students[msg.sender].active_loans;
        
    }
       
    //call this funtion with relevant id (in pyhton we can organize them with 'prioritymode' 
    function repayLoan(uint amount, uint estimatedInterest, uint timeSinceLastPayment, uint id_) public {
        //First check if the payer has enough money
        require(balances[msg.sender] >= amount);
        Loan memory loan = loans[id_];
        //Require that a loan is ongoing
        require(loan.openLoan == true);
        
        //Get some params fromt the loan
        
        uint p = loan.principal_amount;
        uint amountWithInterest = estimatedInterest;
        uint min_share = (loan.sharePercent * loan.income)/100;

        //Get just the interest for that month
        uint interest = amountWithInterest - p;

        //Payable amount should not exceed the amountWithInterest
        require(amountWithInterest>=amount);

        //It is not required that payable amount should also be at least equal to monthly interest, it is highly incetivided yes, to avoid
        //extra compounding of interest for the student to bear but the onlu condition is: 
        //Payable amount should also be at least equal to the agreed share percentage of income
        require(min_share >= amount);

        // Update balance for interest first
        balances[msg.sender] -= interest;
        balances[loan.investor] += interest;

        amount -= interest;
        loan.monthlyCheckpoint += timeSinceLastPayment;
        loan.amount_paid += interest;

        //Decrease principal after interest is paid
        if(amount>0)
        {
            loan.principal_amount -= amount;
            loan.amount_paid += amount;

            balances[msg.sender] -= amount;
            balances[loan.investor] += amount;
        }

        if(loan.principal_amount == 0)
        {
            loans[id_].openLoan = false;
            hasOngoingLoan[msg.sender] = false;
            hasOngoingApplication[msg.sender] = false;
            hasOngoingApplication[loan.investor] = false;
            hasOngoingLoan[loan.investor] = false;
        }
    }
    
    
    //Some functions for both students and investors to put money into their contracts accounts
    //i dont trust how i wrote these written 
    
    function viewBalance() view public returns (uint){
        return balances[msg.sender];
    }
    
    function deposit() payable public {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint amount) public {
        require(amount <= balances[msg.sender]);
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
    }
    
    //transfer money within contract balances
    function t_funds(address giver, address taker, uint amount) public {
        require(balances[giver] >= amount);
        balances[giver] -= amount;
        balances[taker] += amount;
    }

    //Now we just need some functions to make it easier for the contract to interact with the outside world, ie Web3
    //Plus some functions we use as checks when creating students, investors, loans and applications.
    
    function ifApplicationOpen (uint index) view public returns (bool){
        LoanApplication memory app = applications[index];
        if(app.openApp) return true; else return false;
    }
    
    function ifLoanOpen(uint index) view public returns (bool){
        Loan memory loan = loans[index];
        if (loan.openLoan == true) return true; else return false;
    }
    
    function getApplicationData(uint index) view public returns (uint[], string, address){
        string memory RiskRating = applications[index].RiskRating;
        uint[] memory numericalData = new uint[](4);
        numericalData[0] = index;
        numericalData[1] = applications[index].duration;
        numericalData[2] = applications[index].credit_amount;
        numericalData[3] = applications[index].interest_rate;

        address student = applications[index].student;
        return (numericalData, RiskRating, student);
        // numericalData format = [index, duration, amount, interestrate]
    }
    
    function getLoanData(uint index) view public returns (uint[], address, address){
        uint[] memory numericalData = new uint[](9);
        numericalData[0] = index;
        numericalData[1] = loans[index].interest_rate;
        numericalData[2] = loans[index].duration;
        numericalData[3] = loans[index].principal_amount;
        numericalData[4] = loans[index].original_amount;
        numericalData[5] = loans[index].amount_paid;
        numericalData[6] = loans[index].startTime;
        numericalData[7] = loans[index].monthlyCheckpoint;
        numericalData[8] = loans[index].appId;

        return (numericalData, loans[index].student, loans[index].investor);
        // numericalData format = [index, interestrate, duration, p_amnt, o_amnt, paid_amnt, starttime, app_index]
    }
    
    function getNumApplications() view public returns (uint) { return numApplications;}
    function getNumLoans() view public returns (uint) { return numLoans;}
    function isInvestor(address account) view public returns (bool) {return investors[account].EXISTS;}
    function isStudent(address account) view public returns (bool) {return students[account].EXISTS;}
    function getTime() view public returns (uint) {return now;}
    
    //buy and sale functionalities exceed stack depth. Dont know how to solve this excpect 
    //making another contract which is the investor in this and buy/sell that contract.
    
}